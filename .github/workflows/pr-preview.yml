name: PR Preview Build

permissions:
  pull-requests: write  # Allow creating comments on PRs
  issues: write       # Allow creating comments on issues
  contents: read       # Allow reading repository contents

on:
  pull_request:
    types: [opened, synchronize]

jobs:
  build:
    runs-on: ubuntu-latest
    container:
      image: instrumentisto/flutter:latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install OpenJDK 17
        run: |
          apt-get update
          apt-get install -y openjdk-17-jdk
          java -version

      - name: Configure Git safe directory
        run: git config --global --add safe.directory /usr/local/flutter

      - name: Create local.properties
        run: |
          echo "flutter.sdk=/usr/local/flutter" > android/local.properties
          echo "flutter.versionName=1.0.0" >> android/local.properties

      - name: Clean Flutter
        run: flutter clean

      - name: Install dependencies
        run: flutter pub get

      - name: Configure Firebase
        env:
          FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
          ANDROID_PACKAGE_NAME: ${{ secrets.ANDROID_PACKAGE_NAME || 'com.example.todo_app' }}
          IOS_BUNDLE_ID: ${{ secrets.IOS_BUNDLE_ID || 'com.example.todoApp' }}
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
        run: |
          # Install Firebase CLI
          curl -sL https://firebase.tools | bash
          
          # Activate and configure flutterfire
          dart pub global activate flutterfire_cli
          export PATH="$PATH":"$HOME/.pub-cache/bin"
          flutterfire configure \
            --project=$FIREBASE_PROJECT_ID \
            --out=lib/firebase_options.dart \
            --ios-bundle-id=$IOS_BUNDLE_ID \
            --ios-out=ios/Runner/GoogleService-Info.plist \
            --android-package-name=$ANDROID_PACKAGE_NAME \
            --android-out=android/app/google-services.json \
            --platforms=android,ios \
            --yes

      - name: Generate code with build_runner
        run: dart run build_runner build -d

      - name: Build APK
        run: flutter build apk --release

      - name: Upload APK as artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-release
          path: build/app/outputs/flutter-apk/app-release.apk
          retention-days: 7

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: app-release
          path: downloaded-apk

      - name: Install uploadthing
        run: npm install uploadthing

      - name: Upload final APK and comment on PR
        uses: actions/github-script@v6
        env:
          UPLOADTHING_TOKEN: ${{ secrets.UPLOADTHING_TOKEN }}
        with:
          script: |
            const { UTApi } = require('uploadthing/server');
            const fs = require('fs');
            const path = require('path');
            
            const utapi = new UTApi({
              token: process.env.UPLOADTHING_TOKEN
            });
            
            async function uploadApk() {
              const apkPath = path.join(process.cwd(), 'downloaded-apk/app-release.apk');
              const fileBuffer = fs.readFileSync(apkPath);
              const fileName = `app-release-PR${context.issue.number}-${process.env.GITHUB_RUN_NUMBER}.apk`;
              const file = new File([fileBuffer], fileName, { 
                type: "application/vnd.android.package-archive" 
              });
              
              const results = await utapi.uploadFiles([file]);
              const uploadedFile = results[0].data;
              
              if (!uploadedFile) {
                throw new Error('Upload failed: No data returned from UploadThing');
              }
              
              return uploadedFile.ufsUrl;
            }
            
            try {
              const apkUrl = await uploadApk();
              
              const comment = `## üì± Preview APK Available
              
              A preview APK has been built for this PR.
              
              ### Build Information
              - PR: #${{ github.event.pull_request.number }}
              - Commit: ${{ github.sha }}
              - Build: ${{ github.run_id }}
              
              ### Download
              [‚¨áÔ∏è Download APK](${apkUrl})
              `;
              
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            } catch (error) {
              core.setFailed(`Failed to upload APK: ${error.message}`);
            } 